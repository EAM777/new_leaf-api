{"version":3,"sources":["../../src/controller/account.js"],"names":["config","db","api","post","req","res","Account","register","username","body","password","err","accounts","send","passport","authenticate","session","status","scope","generatedAccessToken","respond","get","find","json","account","user","console","log","id","findById","params","put","facilityName","save","message","logout","newFlowerRoom","FlwrRooms","roomName","_id","flowerRooms","push"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;kBAEe,gBAAoB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,IAAJ,CAAS,WAAT,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAE;AACpCC,sBAAQC,QAAR,CAAiB,IAAID,iBAAJ,CAAY;AAC3BE,gBAAUJ,IAAIK,IAAJ,CAASD;AADQ,KAAZ,CAAjB,EAEIJ,IAAIK,IAAJ,CAASC,QAFb,EAEuB,UAASC,GAAT,EAAcC,QAAd,EAAwB;AAC7C,UAAID,GAAJ,EAAS;AACPN,YAAIQ,IAAJ,CAASF,GAAT;AAED;AACDG,yBAASC,YAAT,CACE,OADF,EACW;AACPC,iBAAS;AADF,OADX,EAGKZ,GAHL,EAGUC,GAHV,EAGe,YAAM;AACjBA,YAAIY,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,kCAArB;AACH,OALD;AAMD,KAbD;AAcD,GAfD;;AAiBA;AACAX,MAAIC,IAAJ,CAAS,QAAT,EAAmBW,mBAASC,YAAT,CACjB,OADiB,EACR;AACPC,aAAS,KADF;AAEPE,WAAO;AAFA,GADQ,CAAnB,EAIMC,oCAJN,EAI4BC,uBAJ5B;;AAMAlB,MAAImB,GAAJ,CAAQ,GAAR,EAAa,UAACjB,GAAD,EAAMC,GAAN,EAAc;AACzBC,sBAAQgB,IAAR,CAAa,EAAb,EAAgB,UAACX,GAAD,EAAMC,QAAN,EAAmB;AACjC,UAAID,GAAJ,EAAS;AACPN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACDN,UAAIkB,IAAJ,CAASX,QAAT;AACD,KALD;AAMD,GAPD;;AASFV,MAAImB,GAAJ,CAAQ,KAAR,EAAeN,4BAAf,EAA6B,UAACX,GAAD,EAAMC,GAAN,EAAc;AACzCC,sBAAQgB,IAAR,CAAa,EAAb,EAAgB,UAACX,GAAD,EAAMa,OAAN,EAAkB;AAClC;AACE,UAAIb,GAAJ,EAAS;AACRN,YAAIQ,IAAJ,CAASF,GAAT;AACA;AACDN,UAAIY,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,CAACnB,IAAIqB,IAAL,CAArB;AACD,KAND;AAOD,GARD;;AAUAvB,MAAImB,GAAJ,CAAQ,OAAR,EAAiBN,4BAAjB,EAA+B,UAACX,GAAD,EAAMC,GAAN,EAAc;AAC3CC,sBAAQgB,IAAR,CAAa,EAAb,EAAiB,UAACX,GAAD,EAAMa,OAAN,EAAkB;AACjC;AACA,UAAIb,GAAJ,EAAS;AACPN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACDN,UAAIY,MAAJ,CAAW,GAAX,EALiC,CAKjB;AAChBS,cAAQC,GAAR,CAAY,mBAAZ;AACAD,cAAQC,GAAR,CAAYvB,IAAIqB,IAAJ,CAASG,EAArB;AACAF,cAAQC,GAAR,CAAY,gBAAZ;AACAD,cAAQC,GAAR,CAAYH,OAAZ;AACD,KAVD;AAWAlB,sBAAQuB,QAAR,CAAiBzB,IAAIqB,IAAJ,CAASG,EAA1B,EAA8B,UAACjB,GAAD,EAAMa,OAAN,EAAkB;AAC9C,UAAIb,GAAJ,EAAS;AACPN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACDN,UAAIkB,IAAJ,CAAS,CAACC,OAAD,CAAT;AACAE,cAAQC,GAAR,CAAY,2BAAZ;AACAD,cAAQC,GAAR,CAAY,CAACH,OAAD,CAAZ;AACD,KAPD;AAQD,GApBD;;AAsBA;AACAtB,MAAImB,GAAJ,CAAQ,MAAR,EAAgBN,4BAAhB,EAA8B,UAACX,GAAD,EAAMC,GAAN,EAAc;AAC1CC,sBAAQuB,QAAR,CAAiBzB,IAAI0B,MAAJ,CAAWF,EAA5B,EAA+B,UAACjB,GAAD,EAAMC,QAAN,EAAmB;AAChD,UAAID,GAAJ,EAAS;AACPN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACDN,UAAIkB,IAAJ,CAASX,QAAT;AACD,KALD;AAMD,GAPD;;AASAV,MAAI6B,GAAJ,CAAQ,MAAR,EAAgBhB,4BAAhB,EAA8B,UAACX,GAAD,EAAMC,GAAN,EAAc;AAC1CC,sBAAQuB,QAAR,CAAiBzB,IAAI0B,MAAJ,CAAWF,EAA5B,EAAgC,UAACjB,GAAD,EAAMC,QAAN,EAAmB;AACjD,UAAID,GAAJ,EAAS;AACPN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACDC,eAASoB,YAAT,GAAwB5B,IAAIK,IAAJ,CAASuB,YAAjC;AACApB,eAASqB,IAAT,CAAc,eAAO;AACnB,YAAItB,GAAJ,EAAS;AACPN,cAAIQ,IAAJ,CAASF,GAAT;AACD;AACDN,YAAIkB,IAAJ,CAAS;AACPW,mBAAS;AADF,SAAT;AAGD,OAPD;AAQD,KAbD;AAcD,GAfD;;AAiBE;;AAEFhC,MAAImB,GAAJ,CAAQ,SAAR,EAAmBN,4BAAnB,EAAiC,UAACX,GAAD,EAAMC,GAAN,EAAc;AAC7CD,QAAI+B,MAAJ;AACA9B,QAAIY,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,yBAArB;AACD,GAHD;;AAKAX,MAAIC,IAAJ,CAAS,sBAAT,EAAiC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7CC,sBAAQuB,QAAR,CAAiBzB,IAAI0B,MAAJ,CAAWF,EAA5B,EAAgC,UAACjB,GAAD,EAAMC,QAAN,EAAmB;AACjD,UAAID,GAAJ,EAAS;AACPN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACD,UAAIyB,gBAAgB,IAAIC,qBAAJ,EAApB;AACAD,oBAAcE,QAAd,GAAyBlC,IAAIK,IAAJ,CAAS6B,QAAlC;AACAF,oBAAcxB,QAAd,GAAyBA,SAAS2B,GAAlC;AACAH,oBAAcH,IAAd,CAAmB,UAACtB,GAAD,EAAM6B,WAAN,EAAsB;AACvC,YAAI7B,GAAJ,EAAS;AACPN,cAAIQ,IAAJ,CAASF,GAAT;AACD;AACDC,iBAAS4B,WAAT,CAAqBC,IAArB,CAA0BL,aAA1B;AACAxB,iBAASqB,IAAT,CAAc,eAAO;AACnB,cAAItB,GAAJ,EAAS;AACPN,gBAAIQ,IAAJ,CAASF,GAAT;AACD;AACDN,cAAIkB,IAAJ,CAAS;AACPW,qBAAS;AADF,WAAT;AAGD,SAPD;AAQD,OAbD;AAcD,KArBD;AAsBD,GAvBD;;AAyBAhC,MAAImB,GAAJ,CAAQ,cAAR,EAAwBN,4BAAxB,EAAsC,UAACX,GAAD,EAAMC,GAAN,EAAc;AAClDgC,0BAAUf,IAAV,CAAe,EAAEV,UAAUR,IAAI0B,MAAJ,CAAWF,EAAvB,EAAf,EAA2C,UAACjB,GAAD,EAAM6B,WAAN,EAAsB;AAC/D,UAAI7B,GAAJ,EAAS;AACPN,YAAIY,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBF,GAArB;AACA;AACD;AACD,UAAI6B,gBAAgB,IAApB,EAA0B;AACxBnC,YAAIY,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,uBAArB;AACA;AACD;AACH;AACA;AACF;AACA;AACIa,cAAQC,GAAR,CAAY,mBAAZ;AACAD,cAAQC,GAAR,CAAYvB,IAAI0B,MAAJ,CAAWF,EAAvB;AACAF,cAAQC,GAAR,CAAYa,WAAZ;AACAnC,UAAIkB,IAAJ,CAASiB,WAAT;AAED,KAlBD;AAmBD,GApBD;;AAyBE,SAAOtC,GAAP;AACD,C","file":"account.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Account from '../model/account';\nimport FlwrRooms from '../model/facilityModel/flowerRooms';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport config from '../config';\n\nimport { generatedAccessToken, respond, authenticate } from '../middleware/authMiddleware';\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // '/v1/account'\n  api.post('/register', (req, res) => { // integrate register user with create new facility function.\n    Account.register(new Account({\n      username: req.body.username\n    }), req.body.password, function(err, accounts) {\n      if (err) {\n        res.send(err);\n\n      }\n      passport.authenticate(\n        'local', {\n          session: false\n        })(req, res, () => {\n          res.status(200).send('Successfully created new account')\n      });\n    });\n  });\n\n  // '/v1/account/login'\n  api.post('/login', passport.authenticate(\n    'local', {\n      session: false,\n      scope: []\n    }), generatedAccessToken, respond);\n\n  api.get('/', (req, res) => {\n    Account.find({},(err, accounts) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(accounts)\n    })\n  })\n\napi.get('/me', authenticate, (req, res) => {\n  Account.find({},(err, account) => {\n  //  res.status(200).json(req.user);\n    if (err) {\n     res.send(err);\n    }\n    res.status(200).json([req.user])\n  })\n});\n\napi.get('/user', authenticate, (req, res) => {\n  Account.find({}, (err, account) => {\n    //  res.status(200).json(req.user);\n    if (err) {\n      res.send(err);\n    }\n    res.status(200) //.json(req.user.id)\n    console.log(\"logged in userID:\")\n    console.log(req.user.id)\n    console.log(\"ARRAY of USERS\")\n    console.log(account)\n  });\n  Account.findById(req.user.id, (err, account) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json([account])\n    console.log(\"retrieved logged in user:\")\n    console.log([account])\n  });\n});\n\n// '/v1/account' - read\napi.get('/:id', authenticate, (req, res) => {\n  Account.findById(req.params.id,(err, accounts) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json(accounts)\n  });\n});\n\napi.put('/:id', authenticate, (req, res) => {\n  Account.findById(req.params.id, (err, accounts) => {\n    if (err) {\n      res.send(err);\n    }\n    accounts.facilityName = req.body.facilityName;\n    accounts.save(err => {\n      if (err) {\n        res.send(err);\n      }\n      res.json({\n        message: \"Facility Name Updated\"\n      });\n    });\n  });\n});\n\n  // '/v1/account/logout'\n\napi.get('/logout', authenticate, (req, res) => {\n  req.logout();\n  res.status(200).send('Successfully logged out');\n});\n\napi.post('/flowerRooms/add/:id', (req, res) => {\n  Account.findById(req.params.id, (err, accounts) => {\n    if (err) {\n      res.send(err);\n    }\n    let newFlowerRoom = new FlwrRooms();\n    newFlowerRoom.roomName = req.body.roomName;\n    newFlowerRoom.accounts = accounts._id;\n    newFlowerRoom.save((err, flowerRooms) => {\n      if (err) {\n        res.send(err);\n      }\n      accounts.flowerRooms.push(newFlowerRoom);\n      accounts.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({\n          message: 'Farm saved Successfully'\n        });\n      });\n    });\n  });\n});\n\napi.get('/getRoom/:id', authenticate, (req, res) => {\n  FlwrRooms.find({ accounts: req.params.id },(err, flowerRooms) => {\n    if (err) {\n      res.status(500).send(err);\n      return;\n    }\n    if (flowerRooms === null) {\n      res.status(404).send(\"Flower Room Not Found\");\n      return;\n    }\n  //  console.log([flowerRooms.flowerRooms])\n  //  console.log(flowerRooms.username)\n//    console.log(flowerRooms.id)\n//    console.log(flowerRooms.__v)\n    console.log(\"getRoom API CALL:\")\n    console.log(req.params.id)\n    console.log(flowerRooms)\n    res.json(flowerRooms)\n\n  });\n});\n\n\n\n\n  return api;\n}\n"]}