{"version":3,"sources":["../../../../src/controller/facilityControl/flwrControl/flowerRooms.js"],"names":["config","db","api","get","req","res","FlwrRooms","find","err","flowerRooms","send","json","console","log","findById","params","id","put","authenticate","roomName","body","save","message","delete","status","remove","_id","Farm","farm","Strain","strain","CloneData","clone","roomNumber","post","newFarm","farmName","harvestDate","push"],"mappings":"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","file":"flowerRooms.js","sourcesContent":["import mongoose from 'mongoose';\nimport {  Router\n} from 'express';\nimport FlwrRooms from '../../../model/facilityModel/flowerRooms';\nimport Farm from '../../../model/facilityModel/flwrRoomModel/farm';\n\nimport {\n  authenticate\n} from '../../../middleware/authMiddleware';\n\nexport default ({\n  config,\n  db\n}) => {\n  let api = Router();\n\n\n\n  // '/v1/entity/facility/flwrRoom' - Read\n  api.get('/', (req, res) => {\n    FlwrRooms.find({}, (err, flowerRooms) => {\n     if (err) {\n        res.send(err);\n     }\n      res.json(flowerRooms);\n      console.log(\"Get ALL FLOWER ROOMS\")\n      console.log(flowerRooms)\n  });\n  });\n\n\n  api.get('/:id', (req, res) => {\n    FlwrRooms.findById(req.params.id, (err, flowerRooms) => {\n     if (err) {\n        res.send(err);\n     }\n      res.json(flowerRooms);\n      console.log(\"Get ALL FLOWER ROOMS\")\n      console.log(flowerRooms)\n  });\n  });\n\n//  api.get('/rooms/:id', (req, res) => {\n//    FlwrRooms.find({ account: req.params.id }, (err, flowerRooms) => {\n//      console.log(\"Get Flower Rooms For Specific Account Id:\")\n//      console.log(req.params.id)//\n///\n\n  //    if (err) {\n  //      res.send(err);\n  //    }\n      //res.status(200)\n  //    res.json(flowerRooms);\n  //    console.log(flowerRooms)\n//    });\n//  });\n\n\n\n  // '/v1/entity/facility/flwrRooms/:id' - Read 1\n//  api.get('/getRoom/:id', (req, res) => {\n//    FlwrRooms.find({ account: req.params.id }\n//     , (err, flowerRooms) => {\n//    console.log(\"Get Specifil Room:\")\n//      console.log(req.params.id)\n//      if (err) {\n//      res.send(err);\n//      }\n//   res.json(flowerRooms);\n//    });\n//  });\n\n  // '/v1/entity/facility/flwrRooms/:id' - Update Flower Room\n\n  api.put('/:id', authenticate, (req, res) => {\n    FlwrRooms.findById(req.params.id, (err, flowerRooms) => {\n      if (err) {\n        res.send(err);\n      }\n      flowerRooms.roomName = req.body.roomName;\n      flowerRooms.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({\n          message: \"Flower Room Updated\"\n        });\n      });\n    });\n  });\n\n  // '/v1/entity/facility/flwrRooms/:id' - delete\n  api.delete('/:id', authenticate, (req, res) => {\n    FlwrRooms.findById(req.params.id, (err, flowerRooms) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (flowerRooms === null) {\n        res.status(404).send(\"Flower Room Not Found\");\n        return;\n      }\n\n      FlwrRooms.remove({\n        _id: req.params.id\n      }, (err, flowerRooms) => {\n        if (err) {\n          res.send(500).send(err);\n          return;\n        }\n        Farm.remove({\n          flowerRooms: req.params.id\n        }, (err, farm) => {\n          if (err) {\n            res.send(err);\n          }\n          Strain.remove({\n            farm: req.params.id\n          }, (err, strain) => {\n            if (err) {\n              res.send(err);\n            }\n            CloneData.remove({\n              strain: req.params.id\n            }, (err, clone) => {\n              res.send(err);\n\n            });\n            res.json({\n              message: \"Flower Room, its Farms, and Other Meta Data Successfully Removed\"\n            });\n          });\n        });\n      });\n    });\n  });\n\n  // Get flowerRooms by room numberOfCuts\n  api.get('/:roomName', (req, res) => {\n    FlwrRooms.find({\n      flowerRooms: req.params.roomName\n    }, (err, roomNumber) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(roomNumber)\n    });\n  });\n\n  // CRUD - Create Read Update Delete\n  // '/v1/entity/facility/flowerRooms/farm'\n\n  api.post('/farm/add/:id', authenticate, (req, res) => {\n    FlwrRooms.findById(req.params.id, (err, flowerRooms) => {\n      if (err) {\n        res.send(err);\n      }\n      let newFarm = new Farm();\n      newFarm.farmName = req.body.farmName;\n      newFarm.harvestDate = req.body.harvestDate;\n      newFarm.flowerRooms = flowerRooms._id;\n      newFarm.save((err, farm) => {\n        if (err) {\n          res.send(err);\n        }\n        flowerRooms.farm.push(newFarm);\n        flowerRooms.save(err => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({\n            message: 'Farm saved Successfully'\n          })\n        });\n      });\n    });\n  });\n\n  api.get('/getFarm/:id', (req, res) => {\n    Farm.find({\n      flowerRooms: req.params.id\n    } , (err, farm) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (farm === null) {\n        res.status(404).send(\"Flower Room Not Found\");\n        return;\n      }\n        res.json(farm);\n    });\n  });\n\n\n\n\n\n\n  return api;\n}\n"]}