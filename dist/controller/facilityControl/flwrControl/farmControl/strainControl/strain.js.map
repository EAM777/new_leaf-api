{"version":3,"sources":["../../../../../../src/controller/facilityControl/flwrControl/farmControl/strainControl/strain.js"],"names":["config","db","api","get","req","res","Strain","findById","params","id","err","strain","send","console","log","json","put","find","farm","strainName","body","save","message","delete","authenticate","status","remove","_id","CloneData","cloneData","post","newCloneData","growFlowId","cloneWeight","push"],"mappings":"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","file":"strain.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Farm from '../../../../../model/facilityModel/flwrRoomModel/farm';\nimport Strain from '../../../../../model/facilityModel/flwrRoomModel/farmModel/strain';\nimport CloneData from '../../../../../model/facilityModel/flwrRoomModel/farmModel/cloneModel/clone';\n\n\nimport {\n  authenticate\n} from '../../../../../middleware/authMiddleware';\n\nexport default ({\n  config,\n  db\n}) => {\n  let api = Router();\n\n\n\n  // '/v1/entity/facility/farm/strain - read\n  api.get('/:id', (req, res) => {\n    Strain.findById( req.params.id , (err, strain) => {\n      if (err) {\n        res.send(err);\n      }\n      console.log(\"Get Strain By Id: \")\n      console.log(req.params.id)\n      res.json(strain);\n    });\n  });\n\n\n\n\n  // '/v1/entity/facility/farm/strain/:id' - UPDATE\n  api.put('/:id', (req, res) => {\n    Strain.find({ farm: req.params.id}, (err, strain) => {\n      if (err) {\n        res.send(err);\n      }\n      strain.strainName = req.body.strainName;\n      strain.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({\n          message: \"Strain Info Updated\"\n        })\n      });\n    });\n  });\n\n  // '/v1/entity/facility/farm/strain/:id' - Delete\n  api.delete('/:id', authenticate, (req, res) => {\n    Strain.findById(req.params.id, (err, strain) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (strain === null) {\n        res.status(404).send(\"Strain not Found\");\n        return;\n      }\n      Strain.remove({\n        _id: req.params.id\n      }, (err, strain) => {\n        if (err) {\n          res.send(500).send(err);\n          return;\n        }\n        CloneData.remove({\n          strain: req.params.id\n        }, (err, cloneData) => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({\n            message: \"CloneData Successfully Removed\"\n          });\n        });\n      });\n    });\n  });\n\n\n  // get strain by strainName\n\n  api.get('/strainName/:strainName', (req, res) => {\n    Strain.find({\n      strain: req.body.strainName\n    }, (err, strainName) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(strainName);\n    });\n  });\n\n  // '/v1/entity/facility/flowerRoom/farm/strain/cloneData' - read\n\n  api.post('/cloneData/add/:id', (req, res) => {\n    Strain.findById(req.params.id, (err, strain) => {\n      if (err) {\n        res.send(err);\n      }\n      let newCloneData = new CloneData();\n\n      newCloneData.growFlowId = req.body.growFlowId;\n      newCloneData.cloneWeight = req.body.cloneWeight;\n      newCloneData.strain = strain._id;\n      newCloneData.save((err, cloneData) => {\n        if (err) {\n          res.send(err);\n        }\n        strain.cloneData.push(newCloneData);\n        strain.save(err => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({\n            message: 'Clone Data Saved!'\n          });\n        });\n      });\n    });\n  });\n\n  api.get('/getCloneList/:id', authenticate, (req, res) => {\n    CloneData.find({\n      strain: req.params.id\n    },(err, cloneData) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (cloneData === null) {\n        res.status(404).send(\"Flower Room Not Found\");\n        return;\n      }\n    //  console.log([flowerRooms.flowerRooms])\n    //  console.log(flowerRooms.username)\n  //    console.log(flowerRooms.id)\n  //    console.log(flowerRooms.__v)\n      console.log(\"getCloneList API CALL:\")\n      console.log(req.params.id)\n      console.log(cloneData)\n      res.json(cloneData)\n\n    });\n  });\n\n\n\n\n  return api;\n}\n"]}